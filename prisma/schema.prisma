// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generate Prisma Client to default location (node_modules/.prisma/client)
generator client {
  provider = "prisma-client-js"
  // Removed custom output path - use default location
}

// User model for NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  collaborations DocumentCollaborator[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verificationtokens")
}

model Document {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  ownerId       String    @map("owner_id")
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators DocumentCollaborator[]
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map(name: "documents")
}

model DocumentCollaborator {
  id         String   @id @default(cuid())
  documentId String   @map("document_id")
  userId     String   @map("user_id")
  permission String   @default("read") // read, write, admin
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([documentId, userId])
  @@map(name: "document_collaborators")
}